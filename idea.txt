pip install -r "./requirements.txt" - для скачивания библиотек
git fetch - загрузить изменения с сервера на commit
git pull - скачать commit на уст-воfetch
-----------создание среды--------------
python -m venv <name> - создаем среду с именем name.
<name>\Scripts\activate - активировать среду.
python <--/--/--/File.py> - запустить File.py
SPACE
Set-ExecutionPolicy RemoteSigned - если выдает ошибку "Выполнение сценариев отключено..."
-------------библиотеки-------------
pip freeze > requirements.txt - создать файл с библиотеками

git add .
git commit -m "txt"
git push 
.strip() - убрать пробелы в строке c краев
--------------------------------------
Ввод и вывод данных.
stdin ввод данных через командную строку (стандартный поток)
stdout - вывод данных
работа с файлами 
open (имя файла, ключ)
r - чтение 
w - запись (перезапись)
a - добавление
b - бинарный режим

файлы тоже потоки!!!
важно закрыть файл - close
with open() <------------------- автоматические закрытие файла после выполнения

write - читать файл

Режимы работы
read(количество бит, которые нужно читать (или символов)) - читать сразу весь файл
readline() - читать одну строку
readlines() - читать весь файл (каждая строк - элемент массива)
for line in file - цикл (самый эффективный способ)


кодировки
utf-8 (для macOC)
cp1251 (для виндовс)
latin-1

patchlib и patch - изучить

структуры данных:
JSON - обмен структурированными данными (обмен строгими значениями) {ключ:значение}
CSV - табличные данные (exel)
XML/html - иерархическая разметка
XML - хранение информации и передача данных в структурированном виде
html - предоставление информации в браузере (графическое отображение)
markdown (MD) - текстовая разметка для людей (то, на чем мы пишем README.md)

json.dump - переделать словарь в JSON
ИЗУЧИТь JSON <-----------------------

изучить csv и writer

Ошибки
валидация - проверка корректности входящих данных
цель - не допустить некоректные данные в систему
ПРОВЕРЯТЬ НУЖНО ВСЕ: агрументы функций, расширения файлов, ввод данных, содержание файлов. ВСЕ.

try - опасная зона (потенциально не отрабаывающий код) (не проверенная информация) (код который может не исполнится)
except - то, что будет при сбое
else - выполняется если все окей
finally - горантированное завершение
raise - сигнал о нарушении

как проверить данные 
isinstance(x,int) - проврека типо данных
assert - проверка условааая (как if) (если условаие указанное в assert не верно, то выводится то, что записано через запятую.
raise - выдать ошибку (лучше сломать сейчас)

изучить способы валидировать данные!!! <--------------------
pydantic
hypoyh...
argparse


